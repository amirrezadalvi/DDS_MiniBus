/****************************************************************************
** Meta object code from reading C++ file 'test_serializer.cpp'
**
** Created by: The Qt Meta Object Compiler version 69 (Qt 6.9.2)
**
** WARNING! All changes made in this file will be lost!
*****************************************************************************/

#include <QtCore/qmetatype.h>

#include <QtCore/qtmochelpers.h>

#include <memory>


#include <QtCore/qxptype_traits.h>
#if !defined(Q_MOC_OUTPUT_REVISION)
#error "The header file 'test_serializer.cpp' doesn't include <QObject>."
#elif Q_MOC_OUTPUT_REVISION != 69
#error "This file was generated using the moc from 6.9.2. It"
#error "cannot be used with the include files from this version of Qt."
#error "(The moc has changed too much.)"
#endif

#ifndef Q_CONSTINIT
#define Q_CONSTINIT
#endif

QT_WARNING_PUSH
QT_WARNING_DISABLE_DEPRECATED
QT_WARNING_DISABLE_GCC("-Wuseless-cast")
namespace {
struct qt_meta_tag_ZN14TestSerializerE_t {};
} // unnamed namespace

template <> constexpr inline auto TestSerializer::qt_create_metaobjectdata<qt_meta_tag_ZN14TestSerializerE_t>()
{
    namespace QMC = QtMocConstants;
    QtMocHelpers::StringRefStorage qt_stringData {
        "TestSerializer",
        "testValidData",
        "",
        "testValidAckMinimal",
        "testValidAckWithReceiver",
        "testValidDiscovery",
        "testMalformedJson",
        "testMissingFieldsData",
        "testMissingFieldsAck",
        "testMissingFieldsDiscovery",
        "testValidDataCBOR",
        "testValidAckCBOR",
        "testValidDiscoveryCBOR",
        "testMalformedCBOR",
        "testAutoDetectCBOR",
        "testAutoDetectJSONFallback",
        "testRoundTripDataJSON",
        "testRoundTripDataCBOR",
        "testRoundTripAckJSON",
        "testRoundTripAckCBOR",
        "testRoundTripDiscoveryJSON",
        "testRoundTripDiscoveryCBOR",
        "testMalformedCBORMap",
        "testMalformedCBORNoType",
        "testMalformedJSON",
        "testEmptyData"
    };

    QtMocHelpers::UintData qt_methods {
        // Slot 'testValidData'
        QtMocHelpers::SlotData<void()>(1, 2, QMC::AccessPrivate, QMetaType::Void),
        // Slot 'testValidAckMinimal'
        QtMocHelpers::SlotData<void()>(3, 2, QMC::AccessPrivate, QMetaType::Void),
        // Slot 'testValidAckWithReceiver'
        QtMocHelpers::SlotData<void()>(4, 2, QMC::AccessPrivate, QMetaType::Void),
        // Slot 'testValidDiscovery'
        QtMocHelpers::SlotData<void()>(5, 2, QMC::AccessPrivate, QMetaType::Void),
        // Slot 'testMalformedJson'
        QtMocHelpers::SlotData<void()>(6, 2, QMC::AccessPrivate, QMetaType::Void),
        // Slot 'testMissingFieldsData'
        QtMocHelpers::SlotData<void()>(7, 2, QMC::AccessPrivate, QMetaType::Void),
        // Slot 'testMissingFieldsAck'
        QtMocHelpers::SlotData<void()>(8, 2, QMC::AccessPrivate, QMetaType::Void),
        // Slot 'testMissingFieldsDiscovery'
        QtMocHelpers::SlotData<void()>(9, 2, QMC::AccessPrivate, QMetaType::Void),
        // Slot 'testValidDataCBOR'
        QtMocHelpers::SlotData<void()>(10, 2, QMC::AccessPrivate, QMetaType::Void),
        // Slot 'testValidAckCBOR'
        QtMocHelpers::SlotData<void()>(11, 2, QMC::AccessPrivate, QMetaType::Void),
        // Slot 'testValidDiscoveryCBOR'
        QtMocHelpers::SlotData<void()>(12, 2, QMC::AccessPrivate, QMetaType::Void),
        // Slot 'testMalformedCBOR'
        QtMocHelpers::SlotData<void()>(13, 2, QMC::AccessPrivate, QMetaType::Void),
        // Slot 'testAutoDetectCBOR'
        QtMocHelpers::SlotData<void()>(14, 2, QMC::AccessPrivate, QMetaType::Void),
        // Slot 'testAutoDetectJSONFallback'
        QtMocHelpers::SlotData<void()>(15, 2, QMC::AccessPrivate, QMetaType::Void),
        // Slot 'testRoundTripDataJSON'
        QtMocHelpers::SlotData<void()>(16, 2, QMC::AccessPrivate, QMetaType::Void),
        // Slot 'testRoundTripDataCBOR'
        QtMocHelpers::SlotData<void()>(17, 2, QMC::AccessPrivate, QMetaType::Void),
        // Slot 'testRoundTripAckJSON'
        QtMocHelpers::SlotData<void()>(18, 2, QMC::AccessPrivate, QMetaType::Void),
        // Slot 'testRoundTripAckCBOR'
        QtMocHelpers::SlotData<void()>(19, 2, QMC::AccessPrivate, QMetaType::Void),
        // Slot 'testRoundTripDiscoveryJSON'
        QtMocHelpers::SlotData<void()>(20, 2, QMC::AccessPrivate, QMetaType::Void),
        // Slot 'testRoundTripDiscoveryCBOR'
        QtMocHelpers::SlotData<void()>(21, 2, QMC::AccessPrivate, QMetaType::Void),
        // Slot 'testMalformedCBORMap'
        QtMocHelpers::SlotData<void()>(22, 2, QMC::AccessPrivate, QMetaType::Void),
        // Slot 'testMalformedCBORNoType'
        QtMocHelpers::SlotData<void()>(23, 2, QMC::AccessPrivate, QMetaType::Void),
        // Slot 'testMalformedJSON'
        QtMocHelpers::SlotData<void()>(24, 2, QMC::AccessPrivate, QMetaType::Void),
        // Slot 'testEmptyData'
        QtMocHelpers::SlotData<void()>(25, 2, QMC::AccessPrivate, QMetaType::Void),
    };
    QtMocHelpers::UintData qt_properties {
    };
    QtMocHelpers::UintData qt_enums {
    };
    return QtMocHelpers::metaObjectData<TestSerializer, qt_meta_tag_ZN14TestSerializerE_t>(QMC::MetaObjectFlag{}, qt_stringData,
            qt_methods, qt_properties, qt_enums);
}
Q_CONSTINIT const QMetaObject TestSerializer::staticMetaObject = { {
    QMetaObject::SuperData::link<QObject::staticMetaObject>(),
    qt_staticMetaObjectStaticContent<qt_meta_tag_ZN14TestSerializerE_t>.stringdata,
    qt_staticMetaObjectStaticContent<qt_meta_tag_ZN14TestSerializerE_t>.data,
    qt_static_metacall,
    nullptr,
    qt_staticMetaObjectRelocatingContent<qt_meta_tag_ZN14TestSerializerE_t>.metaTypes,
    nullptr
} };

void TestSerializer::qt_static_metacall(QObject *_o, QMetaObject::Call _c, int _id, void **_a)
{
    auto *_t = static_cast<TestSerializer *>(_o);
    if (_c == QMetaObject::InvokeMetaMethod) {
        switch (_id) {
        case 0: _t->testValidData(); break;
        case 1: _t->testValidAckMinimal(); break;
        case 2: _t->testValidAckWithReceiver(); break;
        case 3: _t->testValidDiscovery(); break;
        case 4: _t->testMalformedJson(); break;
        case 5: _t->testMissingFieldsData(); break;
        case 6: _t->testMissingFieldsAck(); break;
        case 7: _t->testMissingFieldsDiscovery(); break;
        case 8: _t->testValidDataCBOR(); break;
        case 9: _t->testValidAckCBOR(); break;
        case 10: _t->testValidDiscoveryCBOR(); break;
        case 11: _t->testMalformedCBOR(); break;
        case 12: _t->testAutoDetectCBOR(); break;
        case 13: _t->testAutoDetectJSONFallback(); break;
        case 14: _t->testRoundTripDataJSON(); break;
        case 15: _t->testRoundTripDataCBOR(); break;
        case 16: _t->testRoundTripAckJSON(); break;
        case 17: _t->testRoundTripAckCBOR(); break;
        case 18: _t->testRoundTripDiscoveryJSON(); break;
        case 19: _t->testRoundTripDiscoveryCBOR(); break;
        case 20: _t->testMalformedCBORMap(); break;
        case 21: _t->testMalformedCBORNoType(); break;
        case 22: _t->testMalformedJSON(); break;
        case 23: _t->testEmptyData(); break;
        default: ;
        }
    }
    (void)_a;
}

const QMetaObject *TestSerializer::metaObject() const
{
    return QObject::d_ptr->metaObject ? QObject::d_ptr->dynamicMetaObject() : &staticMetaObject;
}

void *TestSerializer::qt_metacast(const char *_clname)
{
    if (!_clname) return nullptr;
    if (!strcmp(_clname, qt_staticMetaObjectStaticContent<qt_meta_tag_ZN14TestSerializerE_t>.strings))
        return static_cast<void*>(this);
    return QObject::qt_metacast(_clname);
}

int TestSerializer::qt_metacall(QMetaObject::Call _c, int _id, void **_a)
{
    _id = QObject::qt_metacall(_c, _id, _a);
    if (_id < 0)
        return _id;
    if (_c == QMetaObject::InvokeMetaMethod) {
        if (_id < 24)
            qt_static_metacall(this, _c, _id, _a);
        _id -= 24;
    }
    if (_c == QMetaObject::RegisterMethodArgumentMetaType) {
        if (_id < 24)
            *reinterpret_cast<QMetaType *>(_a[0]) = QMetaType();
        _id -= 24;
    }
    return _id;
}
QT_WARNING_POP
